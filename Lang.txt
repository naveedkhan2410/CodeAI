from langchain.llms import HuggingFaceLLM
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import torch

# Set up HuggingFace GPT-2 Model using LangChain
class GPT2LangChain:
    def __init__(self, model_name="gpt2"):
        self.model_name = model_name
        self.tokenizer = GPT2Tokenizer.from_pretrained(model_name)
        self.model = GPT2LMHeadModel.from_pretrained(model_name)
        self.model.eval()  # Set to evaluation mode
    
    def generate_text(self, prompt, max_length=100):
        # Tokenize the prompt
        inputs = self.tokenizer.encode(prompt, return_tensors="pt")

        # Generate text using the model
        with torch.no_grad():
            outputs = self.model.generate(inputs, max_length=max_length, num_return_sequences=1, no_repeat_ngram_size=2)

        # Decode the generated text
        generated_text = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
        return generated_text

# Define the LangChain LLM wrapper
class LangChainGPT2(HuggingFaceLLM):
    def __init__(self, model_name="gpt2"):
        # Initialize GPT2LangChain class
        self.llm = GPT2LangChain(model_name)
        
    def _call(self, prompt):
        # Generate text using LangChain-compatible call
        return self.llm.generate_text(prompt)

# Use LangChain with GPT-2
def main():
    # Create LangChain GPT-2 LLM instance
    model = LangChainGPT2()

    # Prompt for the model
    prompt = "Once upon a time"

    # Generate text using LangChain
    result = model._call(prompt)
    print("Generated Text:")
    print(result)

if __name__ == "__main__":
    main()
